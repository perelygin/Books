Карл Вигерс.
Разработка требований к программному обеспечению. Издание третье, дополненное.
КОНСПЕКТ

16.02.21
Введение.
Бизнес-анализ признан профессиональной дисциплиной. Сертфикация в International Institute of Business Analysis и International Requirements Engineering Board.
Программные средства для управления требованиями
Проекты с гибкой разработкой(agile) и работа с требованиями в них.

ГЛАВА 1. 
* Ключевые термины при сборе требований
* Различие между требованиями к продукту и проекту
* Различие между требованиями к разработке и  управлению
* Симптомы проблемы из-за несовершенства методов сбора, документирования, согласования, модификации требований к ПО. 

** ОПРЕДЕЛЕНИЕ ТРЕБОВАНИЙ К ПО **

Требование это - перечень того, что должно быть реализовано. В них описано поведение системы, свойства системы или ее атрибуты. Они могут служить ограничениями в процессе разработки системы.

Бизнес-требование(БТ, business requirements) - это высокоуровневая бизнес-цель заказчика. Описывают почему заказчику нужна такая система,  какие задачи он собирается решать с ее помощью. Например: "Снизить на 30% себестоимость заказа".  БТ могут фиксироваться в таких документах как: Документ о концепции и границах, Устав проекта, Варианты использования(business case).

Бизнес-правило - это регламент,  стандарт,  правило определяющее бизнес-процесс или его часть. Служит источником требований к ПО

Ограничение - это ограничение на выбор вариантов реализации доступных разработчику

Внешнее требование к интерфейсу - Описание взаимодействия между ПО и пользователем

Характеристика - это одна или несколько логически связанных возможностей системы,  которые представляют ценность для пользователя и описаны рядом функциональных требований.

Функциональное требование(ФТ, functional requirement) - это описание требуемого поведения системы в определенных условиях. Определяет, что  должны сделать программисты что бы пользователи могли выполнить свои задачи(пользовательские требования)   в рамках бизнес-требований(БТ). ФТ документируются в документе "Спецификация требований"(software requirements specification - SRS). Пример  ФТ: «У пассажира должна быть возможность распечатать посадочные талоны на все рейсы, на которые он зарегистрировался».

Нефункциональное требование(НФТ) - это описание свойства системы,  которым должна обладать система. Или ограничение,  которое она должна соблюдать. 

Атрибут качества - это вид нефункционального требования,  описывающего характеристику сервиса или производительность продукта.

Системное требование - Требование верхнего уровня к продукту,  состоящему из нескольких подсистем. Подсистемой может быть оборудование

Пользовательское требование(ПТ, user requirements) - задача(приносит пользу), которую могут выполнять в системе определенные классы пользователей. ПТ могут фиксироваться в таких документах  как "Пользовательские истории", "Варианты использования", "таблицы событие-отклик". ПТ описывают то, что пользователь  должен иметь возможность сделать с системой,  что он хочет получить с помощью системы. Пример пользовательской истории регистрации на рейс самолета: "Как пассажир я хочу зарегистрироваться на рейс, чтобы можно было сесть на самолет".

**ТРИ УРОВНЯ ТРЕБОВАНИЙ**

Бизнес-требования(концепция границ)  --> Пользовательские требования --> Функциональные требования.


**ТРЕБОВАНИЯ К ПРОДУКТУ И ТРЕБОВАНИЯ К ПРОЕКТУ**

Требования к проекту - это управление проектом.


**РАЗРАБОТКА И УПРАВЛЕНИЕ ТРЕБОВАНИЯМИ**

Разработка технических 
условий-|
		|-> Разработка 
		|   требований--|
		|			    |-> Выявление. Определение классов пользователей, понимание задач и целей соответствующих бизнес-целям. Окружение для продукта.
		|			    |-> Анализ. Отделить задачи пользователей от ФТ и НФТ. Декомпозиция требований. Получение ФТ из других требований. Атрибуты качества. 
		|     		    |требования по компонентам 
		| 				|    приоритеты реализации. Поиск пробелов в требованиях.
		|			    |-> Документирование. преобразование собранных требований в документы и диаграммы.
		|			    |-> Утверждение. проверка требований, разработка приемочных тестов и критериев приемки
		|-> Управление требованиями.  Мероприятия связанные влиянием требований на проект,  в том числе влияние изменений в требованиях. Связи между  требованиями.


		ГЛАВА 2. Требования с точки зрения клиента
**Разрыв ожиданий.**
Заказчик должен участвовать в подготовке требований,  в противном случае возникнет разрыв между тем что он ожидал получить  и тем,  что разработали программисты. Чем чаще идет общение с заказчиком, тем меньше разрыв. 

**Кто есть Заказчик?**
Важно  составить и проанализировать перечень заинтересованных сторон. Иначе можно упустить часть важных требований. 
Так же нужно понимать,  что за  разные уровни требований отвечают разные заказчики. Начальники не всегда знают,  что нужно конкретным пользователям.  Поэтому обсуждаем с начальниками бизнес-требования, с исполнителями -  пользовательские.
Важно что бы все заинтересованные стороны  понимали цели и ограничения  проекта.

**Сотрудничество клиентов и разработчиков**
Биль о правах клиента при  формулировании требований к ПО. 
Клиент(вы) имеет право:
1. Иметь дело с аналитиком, который разговаривает на вашем языке
2. Иметь дело с аналитиком, хорошо изучившим ваш бизнес и цели, для которых
создается система
3. Потребовать, чтобы аналитик зафиксировал требования в надлежащей форме
4. Получить подробный отчет о будущих процедурах и результатах процесса
формулирования требований
5. На изменение ваших требований
6. На взаимное уважение
7. Знать о вариантах и альтернативах требований и их реализации
8. Описать характеристики, упрощающие работу с продуктом
9. Узнать о способах корректировки требований для ускорения разработки за счет
повторного использования
10. Получить систему, функциональность и качество которой соответствует вашим
ожиданиям


Биль об обязанностях клиента при  формулировании требований к ПО. 
Клиент(Вы) обязан:
1. Ознакомить аналитиков и разработчиков с особенностями вашего бизнеса
2. Потратить столько времени, сколько необходимо на уточнение требований
3. Точно и конкретно описать требования к системе
4. Принимать своевременные решения относительно требований
5. Уважать определенную разработчиком оценку стоимости и возможности
реализации ваших требований
6. Определять реалистичные приоритеты требований совместно с разработчиками
7. Проверять требования и оценивать прототипы
8. Определить критерии приемки
9. Своевременно сообщать об изменениях требований
10. Уважительно относиться к процессам создания требований

**Создание культуры уважения к требованиям**
рассказать всем,  к чему ведет пренебрежение  к работе с требованиями.  Показывать требования разработчикам по мере их подготовки  с тем что бы они могли указать места,  где нужны уточнения. Тестовые сценарии можно начинать почти сразу с разработкой требований - они помогут выявить узкие места в требованиях.

**Определение ответственных за принятие решений**
Нужно определить группу принятия решения и главного в ней. В рамках управления проектом нужен регламент принятия решений.

**Достижение соглашения о требованиях**
• клиенты должны подтвердить, что требования удовлетворяют их потребности;
• разработчики подтверждают, что они понимают требования и в состоянии их реализовать;
• тестировщики подтверждают, что требования поддаются проверке;
• руководство подтверждает, что требования соответствуют их бизнес-целям.
Однако,  подтверждение требований не означает, что их нельзя менять.

**Базовое соглашение о требованиях(baseline)**
Базовое соглашение о требованиях является набором проверенных и согласованных требований, которые служат основой для дальнейшей разработки.
Перекликается с PMBOK в части управления требованиями. После подписания базового соглашения,  все изменения должны выполняться через процесс изменения  требований в проекте (например, оценку влияния новых требований на параметры проекта).
Формула подписания базового соглашения:
"«Подтверждаю, что настоящий набор требований наилучшим образом представляет наше понимание требований к этому проекту на данный момент и что описанная система удовлетворит наши потребности. Я согласен вносить в будущем изменения в это базовое соглашение в соответствии с процессом изменения требований, определенным в проекте. Я понимаю, что изменения могут потребовать переоценки стоимости, ресурсов и сроков сдачи
проекта»."

ГЛАВА 3 Рекомендуемые приемы формулирования требований(best practices)

**Каркас процесса создания требований**
Выявление --> Анализ(связывание потребностей клиента с  программными требованиями) --> Спецификации(формализованные документы  с требованиям) --> Проверка 
+ Управление требованиями.

Процесс может быть итеративным на каждом этапе: уточнение требований, заполнение пробелов, редактирование, переоценка,  подтверждение и исправление.

Действия выполняемые однократно:
1. Определите бизнес-требования.
2. Определите классы пользователей.
3. Определите представителей пользователей.
4. Определите лиц, ответственных за принятие решений по требованиям.
5. Спланируйте выявление требований.
6. Определите пользовательские требования.
7. Определите приоритеты пользовательских требований.

Действия выполняемые итерационно:
8. Сформулируйте пользовательские требования
9. Выведите функциональные требования
10. Смоделируйте требования
11. Определите атрибуты качества
12. Просмотрите требования
13. Разработайте прототипы
14. Разработайте или расширьте архитектуру
15. Распределите требования по компонентам
16. Разработайте тесты на основе требований
17. Проверьте пользовательские, функциональные, нефункциональные требования, модели анализа и прототипы

** Выявление требований**

Три уровня требований: бизнес-уровень, пользовательский уровень и функциональный + нефункциональные хар-ки.

1. Документ о концепции и границах содержит бизнес-требования к продукту. Концепция относительно стабильна,  границы определяются для каждой версии.
2. Определение классов пользователей и их характеристик. Группы или типы пользователей по используемым функциям, обязанностям и т.д. Необходимо найти product champion в каждом классе пользователей,  который будет представлять потребности класса.
3. Проведение фокус-групп типичных пользователей.  ХЗ что это.
4. Работа с пользователями для выяснения назначения продукта.  Фиксируем пользовательские требования - какие задачи решают средствами ПО и какую пользу они хотят извлечь(сценарии использования или пользовательские истории).
5. Определение системных событий и реакции на них. Перечислите возможные внешние события и ожидаемую реакцию системы на них(3 класса: информация от внешнего оборудования, события по расписанию,  бизнес-события).
6. Проведение интервью для выявления требований.
7. Проведение совместных семинаров. Сотрудничество аналитиков и клиентов.
8. Наблюдение за пользователями на рабочих местах. Простые диаграммы рабочих потоков, а также диаграммы потоков данных позволяют выяснить этапы и принимаемые решения, а также то, как взаимодействуют различные группы пользователей.
9. Раздача опросных листов(анкеты).
10. Анализ документов. Чтение инструкций и прочих регламентирующих документов.
11. Изучение отчетов о проблемах работающих систем с целью поиска новых идей.
12. Повторное использование требований.  GAP  анализ

**Анализ требований**
Требования понимают все заинтересованные лица, нет пробелов в требованиях. Выполнена декомпозиция требований на более детальные. Создание прототипов,  анализ осуществимости, согласование приоритетов.
Цель анализа: позволить оценить затраты на проект и начать проектирование, разработку, тестирование.
Полезно представлять требования сразу в двух видах: текст+диаграмма, текст +  тесты и т.д.

Инструменты анализа:
1. Моделирование среды приложения. Карта экосистемы, Контекстная диаграмма - показывает место новой системы в соответствующей среде. Границы системы,  интерфейсы с другим ПО, пользователями, оборудованием
2. Создание пользовательского интерфейса и технических прототипов. Позволяет проверить требования
3. Анализ осуществимости требований. Совместно с разработчиками аналитик понимает возможность реализации требований и определяет приемлемость затрат на их реализацию.
4. Определение приоритетов требований. В первую очередь реализуем самую важную и своевременную функциональность в первую очередь.
5. Создание словаря данных. Содержит определения всех элементов и структур данных, связанных с системой.
6. Моделирование требований. Модель визуально отражает требования. Это может быть диаграммы потоков данных, диаграммы «сущность-связь», диаграммы перехода состояний, таблицы состояний, карты диалоговых окон, деревья решений и другие
7. Анализ интерфейсов между системой и внешним миром. Определяем состав передаваемой  между системами информации,  ее полноту и форматы взаимодействия.
8. Распределение требований по подсистемам. Часто бывает так,  что если требование перенести в другую подсистему,  его будет проще и/или удобнее реализовать.

**Спецификация требований**
Это документирование требований различных типов единообразным, доступным и поддающимся проверке способом так, чтобы они были понятными целевой аудитории.
Бизнес-требования фиксируют в положении о концепции и  границах.
Пользовательские требования фиксируют в виде вариантов использования или пользовательских историй.
Функциональные и нефункциональные требования фиксируются в спецификации требований(SRS) или в средстве управления требованиями. 
1. Внедрение шаблонов документов требований. Да,  нужная штука. В шаблоне указываем обязательные разделы и то,  что в них должно содержаться.
2. Определение источников требований. Должно быть ясно, зачем нужно то или иное требование и откуда оно берется. В качестве источника может быть вариант использования, системное требование высокого уровня, бизнес-требование.
3. Присвоение уникальных идентификаторов всем требованиям. Позволяет отслеживать требования и фиксировать вносимые изменения.
4. Документирование бизнес-правил. Бизнес-правила (инструкции,  положения, регламенты) существуют на уровне предприятия(не проекта). Необходимо определить связь между  функциональным требованиями и бизнес-правилами.
5. Определение нефункциональных требований. Необходимо определить характеристики качества. Т.е. понять в чем оно будет измеряться.

**Проверка требований**
Проверка гарантирует, что все положения требований корректны, отражают желаемые качественные характеристики и удовлетворяют потребностям
клиента.
1. Рецензирование требований. Команда рецензентов, члены которой  представляют разные группы заинтересованных сторон,внимательно изучают требования. Фантастика не научная.
2. Тестирование требований. Тесты составляют альтернативное представление требований. При написании тестов приходится задумываться, как
определить, что ожидаемая функциональность реализована правильно. Необходимо связать тесты с функциональными требованиями чтобы убедиться, что ни одно требование не было упущено.  Можно ли заменить тестами  подробные ФТ?
3. Определение критериев приемки.  Прохождение тестов - один из приемов, нужно понять как будут принимать нефункциональные требования,  как исправлять дефекты, как обучать пользователей,  как внедрять систему.


**Управление требованиями(управление конфигурацией)**
Требования меняются - это факт. Необходимо определить процесс позволяющий предлагать изменения и оценивать их возможную стоимость и влияние на проект, а также гарантировать, что соответствующие заинтересованные лица принимают разумные бизнес-решения о том, какие из предложенных изменений внедрить в требования.
1. Определение процесса управления изменениями. Организация совета по управлению требованиями
2. Анализ влияния изменений требований. как каждое предлагаемое изменение требований повлияет на проект. На основе матрицы связей выявить другие требования и сценарии тестирования, которые, придется изменить. Определить затраты на это.
3. Создание базовой версии и управление версиями требований. Это требования, утвержденные для реализации в конкретной версии или итерации продукта. После фиксации базовой версии,  изменения требований только через процесс управления изменениями.
4. Ведение журнала изменений требований. Иногда нужно вернуться к предыдущей версии требования или узнать, как требование пришло в текущее состояние.
5. Отслеживание состояния всех требований. Статус реализации требований нужен для понимания где мы находимся.
6. Отслеживание проблем с требованиями. нужен список что бы не забыть
7. Создание матрицы связей требований. Наборы связей, которые соединяют отдельные функциональные требования с элементами архитектуры и кода, которые реализуют эти требования, а также с тестами для их проверки. Так же  позволяет сопоставить функциональные требования с требованиями более высоких уровней, на основе которых они созданы, и с другими родственными требованиями. Нужны специальные системы...
8. Использование средств управления требованиями. Да где же его взять....

**Обучение**
1. Обучение аналитиков требований. Необходимо научиться приемам формулирования требований.
2. Ознакомление заинтересованных лиц с требованиями. Коллективное участие различных заинтересованных лиц в обучении работе с требованиями к ПО может оказаться эффективным средством объединения команды.
3. Ознакомление разработчиков с предметной областью. Познакомьте разработчиков с бизнесом клиента, терминологией и назначением создаваемого продукта.
4. Определение процесса разработки требований.  Нужен регламент, определяющий процесс разработки и согласования требований. 
5. Создание бизнес-словаря. Словарь со специализированными терминами из предметной области снизит вероятность непонимания. Содержит синонимы, акронимы и сокращения, термины, имеющие несколько значений, и термины, имеющие в предметной области и повседневной жизни разные значения.


**Управление проектом**
1. Выбор цикла, или модели, разработки ПО
2. Планирование подхода к работе с требованиями
3. Оценка усилий на работу с требованиями
4. Планы реализации проекта должны быть основаны на требованиях
5. Определение лиц, ответственных за принятие решений по требованиям
6. Пересмотр обязательств по проекту при изменении требований
7. Анализ, документирование и управление рисками, связанными с требованиями
8. Контроль и учет объема работ по созданию требований
9. Извлечение уроков из полученного опыта


ГЛАВА 4.   БИЗНЕС АНАЛИТИК

Функции аналитика, требования, которые предъявляются к его знаниям и опыту. Как воспитать аналитика в своей организации.


**Роль бизнес-аналитика**
Бизнес-аналитик — это основное лицо, отвечающее за выявление, анализ, документирование и проверку требований к проекту.
Бизнес-аналитик взаимодействует с куратором проекта(Бизнес-требования), менеджером проекта(информация о масштабе и сложности проекта), с представителями пользователей(пользовательские требования),  с другими заинтересованными сторонами(Ожидания и ограничения),  с тестерами(функциональные и не функц.  требования), с программистами(функциональные и не функц.  требования). 

**Задачи аналитика**
Задача аналитика — прежде всего выяснить, для чего нужна пользователям новая система, и затем определить пользовательские, функциональные и качественные требования, на основе которых команды смогут оценить и спланировать проект, а также спроектировать, построить и проверить продукт.

1. Определить бизнес-требования(БТ). Помогаем куратору,  менеджеру продукта, менеджеру по маркетингу определить  БТ. Ну, т.е. рассказываем заказчику  о том как у него бизнес зацветет и заколосится после внедрения системы.
2. Спланировать подход к работе с требованиями. Аналитик должен разработать планы выявления, анализа, документирования, проверки и управления требованиям на всем протяжении проекта и тесно сотрудничать с менеджером проекта над согласованием этих планов с общим планом проекта для
достижения поставленных целей.  Даже не фантастика. Вообще - это работа менеджера.
3. Определить заинтересованных лиц и классы пользователей. Выделить классы пользователей и совместно с куратором определить представителей классов,  с которыми можно будет работать. Проговорить и зафиксировать то, что ожидаем  от этих людей.
4. Выявить требования.  Формализовать и зафиксировать.
5. Анализировать требования. Ищем пробелы в требованиях, логические несостыковки, противоречия, невысказанные пожелания, которые заказчик считает "будут сделаны по умолчанию". Следим чтобы  требования не вылезли за границы проекта. Обеспечиваем нужную степень детализации.
6. Документировать требования. Нужен документ,  который бы позволял получать информацию о требованиях максимально оперативно и точно. По факту,  этот документ нужен не только(и не столько) в момент написания программы,  сколько при разборе дефектов.  Т.е. он должен быстро дать ответ на вопрос: "Корректно ли  работает программа?".
7. Доводить требования до заинтересованных лиц. Аналитик должен быть убежден, что он правильно понял представителей заказчика. Только получение своевременной обратной связи дает надежду на то, что стороны правильно поняли друг-друга.
8. Управлять проверкой требований. см. п.7  Конечная цель - удовлетворить потребности клиента. То что он наговорил аналитику, по сути вторично. Поэтому чем чаще клиент будет перечитывать требования (т.е. интерпретацию аналитиком  требований к системе), тем чаще он будет задумываться о них,  тем точнее будут требования.
9.  Обеспечить расстановку приоритетов требований.   В соответствии с бизнес-целями. Чем быстрее заказчик получить продукт,  приносящий пользу(может пока и не в полном объеме)







